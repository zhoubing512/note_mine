'''
将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。
一开始我简单地以为，只要将输入的整数拿个数字列表挨个除一遍，能整除的就可以收为质因数。
但事实上是行不通的，因为这样会连同 4、6、9 这样的数字也收进去，而当质因数有重复时（比如12=2*2*3），就会被遗漏掉。
基于以上的考虑，转换思路：还是将输入的整数（n）拿个数字列表挨个除，但要多除几遍，而且每遍除的时候，一旦出现质因数，
立即把这个数字收了，把输入的数字除以这个质因数并重新赋值给n，然后停止这个循环，进入下一个循环。如此便能解决上述的问题。
最后还有一点需要注意的：如果这个数字已被任意质因数整除过，那么走完所有循环之后，最后的 n 也必然是其中的一个质因数，应该把它一并收进列表里。
'''

n = num = int(input('请输入一个数字：'))  # 用num保留初始值
f = []  # 存放质因数的列表

for j in range(int(num / 2) + 1):  # 判断次数仅需该数字的一半多1次
    for i in range(2, n):
        t = n % i  # i不能是n本身
        if t == 0:  # 若能整除
            f.append(i)  # 则表示i是质因数
            n = n // i  # 除以质因数后的n重新进入判断，注意应用两个除号，使n保持整数
            break  # 找到1个质因数后马上break，防止非质数却可以整除的数字进入质因数列表

if len(f) == 0:  # 若一个质因数也没有
    print('该数字没有任何质因数。')
else:  # 若至少有一个质因数
    f.append(n)  # 此时n已被某个质因数整除过，最后一个n也是其中一个质因数
    f.sort()  # 排下序
    print('%d=%d' % (num, f[0]), end='')
    for i in range(1, len(f)):
        print('*%d' % f[i], end='')